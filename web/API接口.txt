/site/login
使用：用户登陆
参数：{
    'username' : xxx
    'password' : xxx
}
返回：{
    'data' : {
        user_id : xxx,
        nick_name : xxx,
        sid : xxxxx
        small_avatar : xxx | null,
	ad_url : xxx | null, 广告的图片url，可能为null
        level : 用户等级。0，1，2，3分别代表普客，秀客，演客，星客
    }
    'success' : true/false,
    'msg' : xxx
}
说明：
    username可以是nick_name，email或者phone，由服务器端自动判断
    返回的json数据，data为用户id，success表示是否登陆成功。msg是success为false时的服务器返回信息。
    sid 是服务器session_id，每次访问要放在cookie里
    small_avatar是小头像。
    通常msg是没有用的，success为false也有可能是服务器端数据库操作失败，没有具体的msg返回。
    客户端的提示信息应该是自定义的友好信息，这里只是保留这个字段。
    在所有的ajax请求的返回都遵循这个格式，下面的描述返回值仅仅指data部分，success和msg不再复述。

/site/register
使用：用户注册
参数：{
    'username' : xxx,
    'nick_name' : xxx,
    'password' : xxx
}
返回：true/false【这里只是data部分，完整格式见上面第一个，以后的不再复述】
说明：
    username可以是手机或邮箱，应该在客户端判断是否符合手机或邮箱格式。
    nick_name是昵称，可以是中文。password不少于6位。
    服务器不返回注册失败的原因，在注册提交之前应该即时地提示用户的邮箱手机或昵称是否已经被占用。

/tip/cemail
使用：检查是否邮箱已经被注册
参数：{
    'email' : xxx
}
返回：true/false
说明：true表明已经被占用，要提示用户不能使用。

/tip/cphone
参数：{
    'phone' : xxx
}

/tip/cnickname
参数：{
    'nick_name' : xxx
}

/user/info
使用：取得用户信息
参数：{
    'user_id' : xxx
}
返回：{
    user_id: 
    nick_name:
    email : 
    phone:
    level : 0/1/2/3 看客，秀客，演客，星客
    sex : 0/1  男女
    constellation : 1-12  星座
    birthday : 
    personalsay: 个人说明
    company: 公司或学校（单位）
    hobby: 兴趣爱好
    big_avatar:
    small_avatar:
    image_server : //图片上传服务器地址
    fan_number : 粉丝数
    friend_number: 好友数
    view_number : 空间来访量（人气）
    relation : [me,friend,follow,fan],
    winner_poster_url : 最近一次获奖的海报，如果没有则为null
}
      relation是一个数组，代表当前登陆用户和这个用户的关系：
      ['me']【是自己】
      ['friend']【是互粉好友】
      ['follow']【对方关注自己】
      ['fan']【是对方粉丝】
      其中，friend,follow,fan可以同时组合出现，比如作为普通用户两个人互相是好友，
            而且两个人还都参加了选秀活动成为秀客彼此互相关注对方，那么他们间就会同时有这三个关系。
说明：返回的birthday格式为Unix的timestamp（是int型而不是字符串，请根据需要转换成本地化显示）

/update/user
使用：更新用户信息
参数：{
    'nick_name' : xxx
    'email' : xxx
    //参考User的数据库字段
}
返回：true/false
说明：
    email和phone至少需要一个。nick_name不能为空。提交表单前客户端请先检查是否被占用。
    birthday为timestamp
    不包括头像的修改，头像修改请使用/user/avatar

/update/quickUser
使用：快速更新用户信息
参数：{
    'nick_name' : xxx
    'sex' : xxx
    'birthday' : xxx
}
返回：true/false
说明：基本跟上面一个接口一样，只是少了很多字段。但不一样的是都可以为空，表明不修改。

/update/avatar
使用：修改头像 [注意upadate和upload的区别。。。]
参数：{
    'big_avatar' : xxx
    'small_avatar' : xxx
}
返回：true/false
说明：头像是url格式的字符串，首先将头像图片传到IMG_SERVER/upload/avatar，将会返回big_avatar,small_avatar. IMG_SERVER是图片上传服务器，当前暂时使用同一个服务器，所以IMG_SERVER可以省略

/update/location
使用：更新用户最近的地理位置
参数：{
    'lat' : xxx.xxx 纬度，浮点类型
    'lng' : xxx.xxx 经度，浮点类型
    'time' : 当前时间，整数型时间戳
    'address': 当前位置。此参数可选，长度暂时规定不超过150个字符，是描述位置，比如“南京大学”，可以使用Google API自动获取。
}
说明：客户端可以每隔10分钟，或是在程序从后台被唤醒时，检测下当前位置和上一次的位置差，如果达到某个值则向服务器更新。
      最好要检测位置差，否则10分钟一次的调用似乎压力有点繁重。这个可以以后再细讨论。

/update/password
使用：更新密码
参数：{
    'pre_password' : xxx
    'password' : xxx
}
返回：true/false
说明：
    pre_password为之前的密码。password为新密码。

/update/avatar
使用：更新头像
参数：{
    'big_avatar' : xxx
    'small_avatar' : xxx
}
返回：true/false


/fan/follow
使用：关注某人
参数：{
    'follow_id' : xxx  //被关注人的user_id
}
返回：true/false

/fan/unfollow
使用：取消关注某人
参数：{
    'follow_id' : xxx  //被关注人的user_id
}
返回：true/false

/fan/friend
使用：互粉某人（成为好友，根据需求描述，互粉只要单向互粉就成为朋友，而关注是单向地关注选手）
参数：{
    'friend_id' : xxx  //被互粉人的user_id
}
返回：true/false

/fan/unfriend
使用：取消互粉某人（成为好友，根据需求描述，互粉只要单向互粉就成为朋友，而关注是单向地关注选手）
参数：{
    'friend_id' : xxx  //被互粉人的user_id
}
返回：true/false

/user/fans
使用：得到某人粉丝
参数：{
    'user_id' : xxx
    'offset' : xxx //可选参数，默认为0.
    'length' : xxx //可选参数，默认为50，如果超过50也最大支持50
}
返回：[{},{},{}]这样一个数组，其中{}为用户的概要信息，格式为：
      {
          'user_id' : xxx,
          'nick_name' : xxx,
          'small_avatar' : xxx //小头像,
          'level' : 等级（秀客星客）
          'fan_number' : 粉丝数
          'friend_number' : 好友数,
          'chat_number' : 粉丝向这个查询用户的留言数
      }
说明：offset和length用于分页（或者显示更多）。初始时传入offset=0,length=N,
      之后每一次取更多则把offset = offset + N，假设返回的data.length < N则说明已经取到尾部了。

/user/friends
使用：得到某人互粉好友
参数和返回同上。

/user/follows
使用：得到某人关注的好友
其中，chat_number是该某人向他关注的人的留言数
参数和返回同上

/active/list
使用：得到活动列表
参数：{
    'act_type' : [0,1,2] 活动类型，表演，才艺，简历
    'offset' : xx  //offset, length之后统计都是用于分页的参数，参见/user/fans，不再复述
    'length' : xx
}
返回：[{
    'act_id' : xxx
    'act_name' : xxx
    'begin_time' : xxx  //整数时间戳，需要转换
    'end_time' : xxx
    'image' : xxx //海报
    'user_id' : xxx //如果user_id不等于null，则表明当前活动用户已经报了名了。
}, {}, {},...]
说明：列表没有返回description，在点进去的详细信息里才会有。用户报名可以在列表页直接报名，也可以在详细页面报名。

/active/userList
使用：得到某个用户参加的活动
参数：{
    'user_id'  : 可选，如果不提供，则默认为当前登陆用户
    'offset' :
    'length' :
}
返回：同上。

/active/openList
使用：得到正在进行中的活动（用于推荐页面）
参数：{
    offset:
    length:
}
返回：同上

/active/closeList
使用：得到已经结束的活动（用于造星页面）
参数：{
    offset:
    length:
}
返回：同上

/active/info
使用：得到活动详细信息
参数：{
    'act_id' : xxx  //活动id
}
返回：{
    同上。
    'description' : xxx
}


#/active/join
#使用：活动报名
#参数：{
#    'act_id' : xxx,
#    'intro' : xxx //个人简介
##    'slogan' : xxx //宣言
#}
#返回：true/false
#说明：个人简介和宣言是报名时可选的内容，用于用户添加信息来作自我宣传。

/active/join
使用：活动报名
参数：{
    'act_id' : xxx
    'intro' : xxx
    'slogan' : xxx
    'photo_number' : 1-8
    'image-0' : file
    'thumb-0' : file
    'image-1' : file
    'thumb-1' : file
    ...
}
返回：true/false
说明：photo_number是用户选中的图片数量，最少一张，最多8张。
      image-XX和thumb-XX分别是图片和缩略图，有多少张就有个多个这两个字段
* 活动报名不再采用分步骤的方式。/upload/photo和/photo/post不再使用

/active/isjoin
使用：当前用户是否参与了活动
参数：{
    'act_id' : xxx
}
返回：true/false

/upload/avatar
使用：上传头像
参数：{
    'image_file' : 图像文件
    'thumb_file' : 缩略图
    'small_file' : 被裁剪后的图像文件
}
返回：{
    'image_url' : xxx
    'thumb_url' : xxx
    'small_url' : xxx
}
说明：source_file是头像的原始图片，会用在比如图片版块的位置搜索时会显示用户头像。
      到底服务器接受头像后直接插数据库，还是返回数据让客户端和其它信息一起提交数据库更新，再讨论。

/upload/photo
使用：报名时上传照片
参数：{
    'act_id' : xxx
    'image_file' : 图像文件
    'thumb_file' : 缩略图文件
}
返回：{
    'image_url' : xxx //图片地址
    'thumb_url' : xxx //缩略图
}
说明：用户报名时，应该是这样的流程。
    首先调用/active/join报名，如果成功，
    则一张照片一张照片地向/upload/photo上传，得到返回的url后，
    再调用/photo/post将图片信息加入。（这个流程思路还值得商榷）
    php服务器生成缩略图性能不好，而且据说没有靠谱的库，生成的效果不好看。所以直接在客户端生成。
    而且有手机可能直接拍的照片很大，也需要先压缩下。
    （该接口已经废除，直接在/active/join接口时传入照片）


/photo/post
使用：上传图片信息
参数：{
    'act_id' : xxx,
    'user_name' : xxx,
    'act_name' : xxx,
    'upload_time' : xxx//整数型时间戳
    'image_url' : xxx
    'thumb_url' : xx//缩略
}
返回：true/false
说明：user_name和act_name是为了冗余方便下次查询，不要联表，因为图片数量巨大。
     客户端需要把这两个字段传给服务器。
     （该接口已经废除，直接在/active/join接口时传入照片）


/photo/locationList
使用：根据距离得到照片列表。(会返回选手的大头像)
参数：{
    'lat' : xxx.xxx
    'lng' : xxx.xxx
    'offset' : xxx
    'length' : xxx  此处四个参数含义和上面接口中已经出现过的一样。
}
返回：[{
    'photo_id' : xx
    'user_id' : xx
    'act_id' : xx
    'user_name' : xx
    'act_name' : xx
    'upload_time' : xx
    'image_url' : xx //图片地址
    'thumb_url' : xx //缩略图地址
    'vote_number' : //当前喜欢的人数
    'view_number' : //当前浏览的人数,
    'score_number' : //当前图片的人气值(vote*10+view)
    'distance' : 上传人离自己的距离
    'address' : 上传人所在地址
    'has_voted' : 1/0 是否已经点了推荐,
    'follow' : 1/0 当前用户是否已经关注上传人
}, {}, {}, ...]

/photo/timeList
使用：根据时间得到照片列表。（会返回用户上传的几张图片中的最后一张）
参数：{
    'time' : xxx
    'offset' : xxx
    'length' : xxx
}
返回：同上。注意每次取更多照片时time要保持一致，否则可能出现逻辑错误。
     如果要刷新时间后取最新的照片，则应该从offset=0开始取。

/photo/viewList
使用：根据人气返回照片列表。
参数：{
    'offset' : xxx
    'length' : xxx
}
返回：同上
说明：目前是按照 vote_number * 10 + view_number来计算的人气。
     有个问题是，当用户取更多数据的时候，可能当前人气已经发生了变化。
     但这个问题没办法跟本上解决，所以建议客户端一次多取点数据（比如200），
     但显示的时候一次加载20张图片。

/photo/userList
使用：返回某个用户的所有照片。
参数：{
    user_id: xxx
    offset : 
    length : 
}
返回：同上

/photo/lastViewList
使用：返回最新一期活动的图片，按人气排序。用在评奖模块的推荐页面。
参数：{
    'offset' :
    'length' :
}
返回：同上
说明：人气计算同/photo/viewList

/photo/randList
使用：随机返回照片列表
参数：{
    'offset' : xxx
    'length' : xxx
}
返回：同上
说明：这个接口可以用在用户登陆后的首页。注意随机的照片可能是重复的，
     因为服务器端保证不重复性能很差。但这个应该没有关系，当照片非常多的时候重复的可能性很小。
     如果要求苛刻，可以在客户端判断下。

/photo/activeList
使用：返回某个活动的上传照片
参数：{
    act_id : xxx
    offset : xxx
    length : xxx
}
返回：同上


/video/timeList
/video/locationList
/video/userList
/video/randList
/video/viewList

/video/lastViewList  //用在评奖模块的造昨页面

视屏接口就是把photo换成vedio，返回值image_url和thumb_url分别换成big_url和small_url分别代表高清和普通，其它都一样.
还多了一个poster_url是海报




/vote/photo
使用：给photo投票（喜欢）
{
    'photo_id' : xxx
}
返回：true/false

/vote/video
使用：给video投票（喜欢）
{
    'video_id' : xxx
}
返回：true/false

/view/photo
使用：用户查看照片大图时增加人气
{
    'photo_id' : xxx
}
返回：true/false

/view/video
使用：用户播放视频时增加人气
{
    'video_id' : xxx
}
返回：true/false

/search/user
使用：搜索用户
参数：{
    email : xxx
    phone : xxx
    sex : 0/1
    constellation : 1-12  星座。
    1-12分别代表对应月份的上半月星座。比如1是摩羯，2是水瓶，双鱼，白羊，金牛，双子，巨蟹，狮子，处女，天秤，天蝎，射手
    age_from : 0-100
    age_to : 0-100
    nick_name : xxx(模糊搜索)
    company : xxx学校公司（模糊搜索）
    hobby ：爱好（模糊搜索）
    fan_number: xx
    friend_number: xx
    address : xxx
    distance : xx
    lat : xx.xx
    lng : xx.xx
}
返回：[{
    //完整的用户信息，见/user/info
    //这里是否需要返回完整的信息，可以再讨论。
    以及：
    distance : 距离（如果搜索时带了distance参数）
    address : 位置（如果搜索时带了distance或address参数）
},{},{},{}]
说明：以上参数为组合参数。其中一但email或phone中有一个出现，
    则为精确搜索。这个可以方便快速定位选手，便于拉票。
    age_from和age_to必须同时出现，搜索年龄段，age_from必须小于或等于age_to,
    如果搜索某个确定年龄，则age_to=age_from，请客户端注意。
    distance和lat,lng必须同时出现，查找lat，lng经纬度中心的distance米的人。
    address和distance不能同时出现。查找关键字为xx的地方的人。
    （由于自动定位的经纬度不一定准确，可以考虑地点名称由用户输入，就像人人的报道）
    fan_number和friend_number是指搜索用户的粉丝或好友需要超过这个数量


/search/photo
使用：搜索照片
参数：{
    email:
    phone:
    nick_name:
    act_name : //活动名称（模糊搜索）
    address:
    distance:
    lat:
    lng:
}
（参数意义同上，是指搜索这些信息对应的用户上传的照片。额外有act_name）
（当前版本没有照片的单独地理信息）
返回：{
    Photo的所有信息。
    distance : 
    address : (同上)
}

/search/vedio
使用：搜索视频
参数：{
    email : 
    phone :
    nick_name :
    vedio_name: //节目名字（模糊搜索）
    act_name : //活动名字
}
返回：{
    
}
说明：视频不是用户上传的，而且视频数量较少，所以没有地理位置。

/search/active
使用：搜索活动
参数：{
    'act_type': xx
    act_name : 
}
返回：{
    
}

/chat/unreadList
使用：返回未读聊天列表
参数：{
    offset : xxx
    length : xxx
}
返回：[{
    from_user_id : 
    content : 消息内容
    time : 
    user_name : 
    user_avatar : 
},{},{}]
说明：以用户为单位的列表，跟同一个用户的未读聊天会只显示他最新的一条。
    用户点击查看消息详情时，使用from_user_id调用/chat/dialog打开具体的聊天对话

/chat/unreadCount
使用：返回未读消息数
参数：无
返回: {count: xxx}
说明：每5分钟调用一次，如果未读数大于1，则提示用户刷新。

/chat/setRead
使用：设置与某个用户的对话为已读
参数：{
    from_user_id : xxx
}
返回：true/false

/chat/dialog
使用：查看与某用户的详细聊天列表
参数：{
    from_user_id : xxx
    offset: 
    length:
}
返回：[{
    Chat所有字段
},{},{}]

/chat/allList
使用：返回所有消息列表（包括未读，时间排序）
说明：也是合并后的列表。同/chat/unreadList


/chat/post
使用：发布聊天
参数：{
    to_user_id : 对方id
    content : 内容，最多150字。
}
返回：true/false

/notify/unreadList
使用：得到未读系统通知
参数：{
    'offset' : xxx
    'length' : xxx
}
返回：[{
    notify_id : xxx
    type : xxx //消息类型。目前暂时不管这个参数。以后可能会有不同类型的通知
    time : xxx //通知发布的时间
    content : xx //通知内容
    to_user_id : xx   //通知的用户对象。这个参数也不用管，肯定是当前登陆的用户
},{},{}...]

/notify/allList
使用：返回所有系统通知。包括已读未读。
参数和返回同上。

/notify/unreadCount
使用：返回未读通知数
参数：无
返回: {count: xxx}
说明：每5分钟调用一次，如果未读数大于1，则提示用户刷新。

/notify/setRead
使用：设置该用户的所有系统通知为已读
参数：{
    //无
}
返回：true/false

/notify/setReadOne
使用：设置该用户的某条系统通知为已读
参数：{
    notify_id : xxx
}
返回：true/false

/star/timeList
使用：得到星客列表，按选拔的时间
参数：{
    offset : xx
    length : xx
}
返回：[{
    user_id : xx,
    act_id : xx,
    act_vote : xx
    act_view: xx,
    act_score : xx, //分别是在这个活动中他得到的喜欢数，总浏览量和得分（喜欢*10+浏览）。手机端保留，可不使用。
    poster_url : xx, //当选海报，可能为null如果后台没有为他上传海报
    user_name : xx
    act_name : xx //活动名称
    time : xx    //获选时间
}, {}, {}]

/star/actList
使用：得到某个活动的星客列表
参数：{
    act_id : xxx
    offset
    length
}
返回：同上
说明：这个接口保留，似乎暂时不需要使用。

/message/overviewList
使用：得到消息概览列表。
参数：{
    offset :
    length :
}
返回：{
    'total_chat' :  未读聊天总数
    'total_news' :  新闻消息总数
    'total_notify' : 未读系统通知总数
    'list' : [
        {
            'news_id' :
            'content' :
            'time' : //发布时间
            'type' :
            'tag' : //type和tag是保留的，用来可能的比如新闻的点击后跳转。客户端暂时可以不用。
        },
        {
            'notify_id' :
            'content' :
            'time' :
            'is_read' :  // is_read和type都是保留功能。客户端如果觉得已读未读暂时有点麻烦，就不用管了。
            'type' :
            'to_user_id' : //一定是当前用户，可忽略
        },
        //注意！前两条分别是新闻和未读通知。但是也可能没有，为了方便客户端开发，如果没有，则前两条都是null。
        //接下来是用户的未读留言，以用户为单位分组（跟/chat/unread_list）一样。
        {
            msg_id :
            content :
            time :
            is_read :
            from_user_id :
            to_user_id : 一定是当前用户，可忽略
        },
        {},
        {}
    ]
}
说明：

offset和length只用来控制未读留言的数量。返回的数据实际是length+2（如果未读留言总数>length）。
如果offset不等于0，则表明用户是要取更多的未读留言数据，则返回的数据total_chat,total_news,total_notify
都是0，并且list里面前两条不再有特别含义都是未读留言。

/message/detailList
使用：得到详细消息列表
参数：{
    from_user_id :
    offset :
    length :
}
返回：[{},{},{},...]
如果from_user_id = -1,则返回新闻列表。新闻字段见上个接口。
如果from_user_id = -2,则返回未读消息列表。消息字段见上个接口。
如果from_user_id >= 0, 则返回和这个用户的留言对话。同/chat/dialog接口

/setting/get
使用：得到系统参数
参数：{
    'key' : xxx
}
返回：{
    'key' : xxx
    'value' : xxx
}
说明，这个接口用来得到系统配置。当前已有的key包括：
'background' : 首页的背景图片。
'advertisement' : 广告图片

/winner/userList
使用：返回所有获奖用户
参数：{
    offset:
    length:
}
返回：[{
    'user_id' : xx
    'video_id' : xx //这个参数用来提供给下面的接口使用。使得点进去的列表的第一个视频是该视频。
    'nick_name' : xx
    'poster_url' : 获奖海报
    'time' : 获奖时间
    'video_name' : 视频名称
},{},{}]

/winner/videoList
使用：返回获奖用户的视频列表
参数：{
    'video_id' : xx  这个参数是用户点击到的那个获奖视频的id。用来放在第一个位置显示。这个参数是从上一个接口得到的。
                     可以不传这个参数，则默认把最新一期放在最上面。
    'user_id' : xx
    'offset' :
    'length' :
}
返回：同/video/list
说明：返回的第一个元素为用户的获奖视频。之后为其它视频